//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../core/src/main/java/ru/korinc/core/utils/Touple.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Touple.h"

@interface RuKorincCoreUtilsTouple () {
 @public
  id a_;
  id b_;
}

@end

J2OBJC_FIELD_SETTER(RuKorincCoreUtilsTouple, a_, id)
J2OBJC_FIELD_SETTER(RuKorincCoreUtilsTouple, b_, id)

@implementation RuKorincCoreUtilsTouple

- (instancetype)initWithId:(id)a
                    withId:(id)b {
  RuKorincCoreUtilsTouple_initWithId_withId_(self, a, b);
  return self;
}

- (id)getA {
  return a_;
}

- (id)getB {
  return b_;
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  if (o == nil || [self java_getClass] != [o java_getClass]) {
    return false;
  }
  RuKorincCoreUtilsTouple *touple = (RuKorincCoreUtilsTouple *) cast_chk(o, [RuKorincCoreUtilsTouple class]);
  if (a_ != nil ? ![a_ isEqual:touple->a_] : touple->a_ != nil) {
    return false;
  }
  return b_ != nil ? [b_ isEqual:touple->b_] : touple->b_ == nil;
}

- (NSUInteger)hash {
  jint result = a_ != nil ? ((jint) [a_ hash]) : 0;
  result = 31 * result + (b_ != nil ? ((jint) [b_ hash]) : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withId:);
  methods[1].selector = @selector(getA);
  methods[2].selector = @selector(getB);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "a_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
    { "b_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LNSObject;", "(TA;TB;)V", "()TA;", "()TB;", "equals", "LNSObject;", "hashCode", "TA;", "TB;", "<A:Ljava/lang/Object;B:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _RuKorincCoreUtilsTouple = { "Touple", "ru.korinc.core.utils", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, 9, -1 };
  return &_RuKorincCoreUtilsTouple;
}

@end

void RuKorincCoreUtilsTouple_initWithId_withId_(RuKorincCoreUtilsTouple *self, id a, id b) {
  NSObject_init(self);
  self->a_ = a;
  self->b_ = b;
}

RuKorincCoreUtilsTouple *new_RuKorincCoreUtilsTouple_initWithId_withId_(id a, id b) {
  J2OBJC_NEW_IMPL(RuKorincCoreUtilsTouple, initWithId_withId_, a, b)
}

RuKorincCoreUtilsTouple *create_RuKorincCoreUtilsTouple_initWithId_withId_(id a, id b) {
  J2OBJC_CREATE_IMPL(RuKorincCoreUtilsTouple, initWithId_withId_, a, b)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RuKorincCoreUtilsTouple)
