//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../core/src/main/java/ru/korinc/core/utils/Utils.java
//

#include "J2ObjC_source.h"
#include "Utils.h"
#include "java/lang/Iterable.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

@interface RuKorincCoreUtilsUtils_SearchResult () {
 @public
  jint position_;
  id item_;
}

@end

J2OBJC_FIELD_SETTER(RuKorincCoreUtilsUtils_SearchResult, item_, id)

@interface RuKorincCoreUtilsUtils_Matcher : NSObject

@end

@interface RuKorincCoreUtilsUtils_ApplySearchResult : NSObject

@end

@interface RuKorincCoreUtilsUtils_Apply : NSObject

@end

@interface RuKorincCoreUtilsUtils_Action : NSObject

@end

@implementation RuKorincCoreUtilsUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RuKorincCoreUtilsUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)applyWithJavaLangIterable:(id<JavaLangIterable>)source
withRuKorincCoreUtilsUtils_Matcher:(id<RuKorincCoreUtilsUtils_Matcher>)matcher
 withRuKorincCoreUtilsUtils_Apply:(id<RuKorincCoreUtilsUtils_Apply>)action {
  RuKorincCoreUtilsUtils_applyWithJavaLangIterable_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_Apply_(source, matcher, action);
}

+ (void)applyWithJavaLangIterable:(id<JavaLangIterable>)source
 withRuKorincCoreUtilsUtils_Apply:(id<RuKorincCoreUtilsUtils_Apply>)action {
  RuKorincCoreUtilsUtils_applyWithJavaLangIterable_withRuKorincCoreUtilsUtils_Apply_(source, action);
}

+ (void)applyWithJavaLangIterable:(id<JavaLangIterable>)source
withRuKorincCoreUtilsUtils_Matcher:(id<RuKorincCoreUtilsUtils_Matcher>)matcher
withRuKorincCoreUtilsUtils_Matcher:(id<RuKorincCoreUtilsUtils_Matcher>)breakOn
 withRuKorincCoreUtilsUtils_Apply:(id<RuKorincCoreUtilsUtils_Apply>)action {
  RuKorincCoreUtilsUtils_applyWithJavaLangIterable_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_Apply_(source, matcher, breakOn, action);
}

+ (RuKorincCoreUtilsUtils_SearchResult *)arrayListFirstWithJavaUtilArrayList:(JavaUtilArrayList *)source
                                          withRuKorincCoreUtilsUtils_Matcher:(id<RuKorincCoreUtilsUtils_Matcher>)condition
                                withRuKorincCoreUtilsUtils_ApplySearchResult:(id<RuKorincCoreUtilsUtils_ApplySearchResult>)ifFound {
  return RuKorincCoreUtilsUtils_arrayListFirstWithJavaUtilArrayList_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_ApplySearchResult_(source, condition, ifFound);
}

+ (RuKorincCoreUtilsUtils_SearchResult *)arrayListFirstWithJavaUtilArrayList:(JavaUtilArrayList *)source
                                          withRuKorincCoreUtilsUtils_Matcher:(id<RuKorincCoreUtilsUtils_Matcher>)condition
                                withRuKorincCoreUtilsUtils_ApplySearchResult:(id<RuKorincCoreUtilsUtils_ApplySearchResult>)ifFound
                                           withRuKorincCoreUtilsUtils_Action:(id<RuKorincCoreUtilsUtils_Action>)not_ {
  return RuKorincCoreUtilsUtils_arrayListFirstWithJavaUtilArrayList_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_ApplySearchResult_withRuKorincCoreUtilsUtils_Action_(source, condition, ifFound, not_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x9, 0, 5, -1, 6, -1, -1 },
    { NULL, "LRuKorincCoreUtilsUtils_SearchResult;", 0x9, 7, 8, -1, 9, -1, -1 },
    { NULL, "LRuKorincCoreUtilsUtils_SearchResult;", 0x9, 7, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(applyWithJavaLangIterable:withRuKorincCoreUtilsUtils_Matcher:withRuKorincCoreUtilsUtils_Apply:);
  methods[2].selector = @selector(applyWithJavaLangIterable:withRuKorincCoreUtilsUtils_Apply:);
  methods[3].selector = @selector(applyWithJavaLangIterable:withRuKorincCoreUtilsUtils_Matcher:withRuKorincCoreUtilsUtils_Matcher:withRuKorincCoreUtilsUtils_Apply:);
  methods[4].selector = @selector(arrayListFirstWithJavaUtilArrayList:withRuKorincCoreUtilsUtils_Matcher:withRuKorincCoreUtilsUtils_ApplySearchResult:);
  methods[5].selector = @selector(arrayListFirstWithJavaUtilArrayList:withRuKorincCoreUtilsUtils_Matcher:withRuKorincCoreUtilsUtils_ApplySearchResult:withRuKorincCoreUtilsUtils_Action:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "apply", "LJavaLangIterable;LRuKorincCoreUtilsUtils_Matcher;LRuKorincCoreUtilsUtils_Apply;", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<TT;>;Lru/korinc/core/utils/Utils$Matcher<TT;>;Lru/korinc/core/utils/Utils$Apply<TT;>;)V", "LJavaLangIterable;LRuKorincCoreUtilsUtils_Apply;", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<TT;>;Lru/korinc/core/utils/Utils$Apply<TT;>;)V", "LJavaLangIterable;LRuKorincCoreUtilsUtils_Matcher;LRuKorincCoreUtilsUtils_Matcher;LRuKorincCoreUtilsUtils_Apply;", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<TT;>;Lru/korinc/core/utils/Utils$Matcher<TT;>;Lru/korinc/core/utils/Utils$Matcher<TT;>;Lru/korinc/core/utils/Utils$Apply<TT;>;)V", "arrayListFirst", "LJavaUtilArrayList;LRuKorincCoreUtilsUtils_Matcher;LRuKorincCoreUtilsUtils_ApplySearchResult;", "<T:Ljava/lang/Object;>(Ljava/util/ArrayList<TT;>;Lru/korinc/core/utils/Utils$Matcher<TT;>;Lru/korinc/core/utils/Utils$ApplySearchResult<TT;>;)Lru/korinc/core/utils/Utils$SearchResult<TT;>;", "LJavaUtilArrayList;LRuKorincCoreUtilsUtils_Matcher;LRuKorincCoreUtilsUtils_ApplySearchResult;LRuKorincCoreUtilsUtils_Action;", "<T:Ljava/lang/Object;>(Ljava/util/ArrayList<TT;>;Lru/korinc/core/utils/Utils$Matcher<TT;>;Lru/korinc/core/utils/Utils$ApplySearchResult<TT;>;Lru/korinc/core/utils/Utils$Action;)Lru/korinc/core/utils/Utils$SearchResult<TT;>;", "LRuKorincCoreUtilsUtils_SearchResult;LRuKorincCoreUtilsUtils_Matcher;LRuKorincCoreUtilsUtils_ApplySearchResult;LRuKorincCoreUtilsUtils_Apply;LRuKorincCoreUtilsUtils_Action;" };
  static const J2ObjcClassInfo _RuKorincCoreUtilsUtils = { "Utils", "ru.korinc.core.utils", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, 12, -1, -1, -1 };
  return &_RuKorincCoreUtilsUtils;
}

@end

void RuKorincCoreUtilsUtils_init(RuKorincCoreUtilsUtils *self) {
  NSObject_init(self);
}

RuKorincCoreUtilsUtils *new_RuKorincCoreUtilsUtils_init() {
  J2OBJC_NEW_IMPL(RuKorincCoreUtilsUtils, init)
}

RuKorincCoreUtilsUtils *create_RuKorincCoreUtilsUtils_init() {
  J2OBJC_CREATE_IMPL(RuKorincCoreUtilsUtils, init)
}

void RuKorincCoreUtilsUtils_applyWithJavaLangIterable_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_Apply_(id<JavaLangIterable> source, id<RuKorincCoreUtilsUtils_Matcher> matcher, id<RuKorincCoreUtilsUtils_Apply> action) {
  RuKorincCoreUtilsUtils_initialize();
  RuKorincCoreUtilsUtils_applyWithJavaLangIterable_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_Apply_(source, matcher, nil, action);
}

void RuKorincCoreUtilsUtils_applyWithJavaLangIterable_withRuKorincCoreUtilsUtils_Apply_(id<JavaLangIterable> source, id<RuKorincCoreUtilsUtils_Apply> action) {
  RuKorincCoreUtilsUtils_initialize();
  RuKorincCoreUtilsUtils_applyWithJavaLangIterable_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_Apply_(source, nil, nil, action);
}

void RuKorincCoreUtilsUtils_applyWithJavaLangIterable_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_Apply_(id<JavaLangIterable> source, id<RuKorincCoreUtilsUtils_Matcher> matcher, id<RuKorincCoreUtilsUtils_Matcher> breakOn, id<RuKorincCoreUtilsUtils_Apply> action) {
  RuKorincCoreUtilsUtils_initialize();
  for (id<JavaUtilIterator> iter = [((id<JavaLangIterable>) nil_chk(source)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id val = [iter next];
    if (matcher == nil || [matcher matchWithId:val]) {
      [((id<RuKorincCoreUtilsUtils_Apply>) nil_chk(action)) applyWithJavaUtilIterator:iter withId:val];
      if (breakOn != nil && [breakOn matchWithId:val]) {
        return;
      }
    }
  }
}

RuKorincCoreUtilsUtils_SearchResult *RuKorincCoreUtilsUtils_arrayListFirstWithJavaUtilArrayList_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_ApplySearchResult_(JavaUtilArrayList *source, id<RuKorincCoreUtilsUtils_Matcher> condition, id<RuKorincCoreUtilsUtils_ApplySearchResult> ifFound) {
  RuKorincCoreUtilsUtils_initialize();
  return RuKorincCoreUtilsUtils_arrayListFirstWithJavaUtilArrayList_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_ApplySearchResult_withRuKorincCoreUtilsUtils_Action_(source, condition, ifFound, nil);
}

RuKorincCoreUtilsUtils_SearchResult *RuKorincCoreUtilsUtils_arrayListFirstWithJavaUtilArrayList_withRuKorincCoreUtilsUtils_Matcher_withRuKorincCoreUtilsUtils_ApplySearchResult_withRuKorincCoreUtilsUtils_Action_(JavaUtilArrayList *source, id<RuKorincCoreUtilsUtils_Matcher> condition, id<RuKorincCoreUtilsUtils_ApplySearchResult> ifFound, id<RuKorincCoreUtilsUtils_Action> not_) {
  RuKorincCoreUtilsUtils_initialize();
  RuKorincCoreUtilsUtils_SearchResult *res = new_RuKorincCoreUtilsUtils_SearchResult_initWithInt_withId_(-1, nil);
  jint position = -1;
  jboolean found = false;
  for (id __strong val in nil_chk(source)) {
    if ([((id<RuKorincCoreUtilsUtils_Matcher>) nil_chk(condition)) matchWithId:val]) {
      res = new_RuKorincCoreUtilsUtils_SearchResult_initWithInt_withId_(++position, val);
      found = true;
      break;
    }
    position++;
  }
  if (found) {
    if (ifFound != nil) {
      [ifFound applyWithRuKorincCoreUtilsUtils_SearchResult:res];
    }
  }
  else {
    if (not_ != nil) {
      [not_ call];
    }
  }
  return res;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RuKorincCoreUtilsUtils)

@implementation RuKorincCoreUtilsUtils_SearchResult

- (instancetype)initWithInt:(jint)position
                     withId:(id)item {
  RuKorincCoreUtilsUtils_SearchResult_initWithInt_withId_(self, position, item);
  return self;
}

- (jint)getPosition {
  return position_;
}

- (id)getItem {
  return item_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withId:);
  methods[1].selector = @selector(getPosition);
  methods[2].selector = @selector(getItem);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "position_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "item_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "ILNSObject;", "(ITT;)V", "()TT;", "TT;", "LRuKorincCoreUtilsUtils;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _RuKorincCoreUtilsUtils_SearchResult = { "SearchResult", "ru.korinc.core.utils", ptrTable, methods, fields, 7, 0x9, 3, 2, 4, -1, -1, 5, -1 };
  return &_RuKorincCoreUtilsUtils_SearchResult;
}

@end

void RuKorincCoreUtilsUtils_SearchResult_initWithInt_withId_(RuKorincCoreUtilsUtils_SearchResult *self, jint position, id item) {
  NSObject_init(self);
  self->position_ = position;
  self->item_ = item;
}

RuKorincCoreUtilsUtils_SearchResult *new_RuKorincCoreUtilsUtils_SearchResult_initWithInt_withId_(jint position, id item) {
  J2OBJC_NEW_IMPL(RuKorincCoreUtilsUtils_SearchResult, initWithInt_withId_, position, item)
}

RuKorincCoreUtilsUtils_SearchResult *create_RuKorincCoreUtilsUtils_SearchResult_initWithInt_withId_(jint position, id item) {
  J2OBJC_CREATE_IMPL(RuKorincCoreUtilsUtils_SearchResult, initWithInt_withId_, position, item)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RuKorincCoreUtilsUtils_SearchResult)

@implementation RuKorincCoreUtilsUtils_Matcher

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(matchWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "match", "LNSObject;", "(TT;)Z", "LRuKorincCoreUtilsUtils;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _RuKorincCoreUtilsUtils_Matcher = { "Matcher", "ru.korinc.core.utils", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, 4, -1 };
  return &_RuKorincCoreUtilsUtils_Matcher;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RuKorincCoreUtilsUtils_Matcher)

@implementation RuKorincCoreUtilsUtils_ApplySearchResult

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithRuKorincCoreUtilsUtils_SearchResult:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "apply", "LRuKorincCoreUtilsUtils_SearchResult;", "(Lru/korinc/core/utils/Utils$SearchResult<TT;>;)V", "LRuKorincCoreUtilsUtils;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _RuKorincCoreUtilsUtils_ApplySearchResult = { "ApplySearchResult", "ru.korinc.core.utils", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, 4, -1 };
  return &_RuKorincCoreUtilsUtils_ApplySearchResult;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RuKorincCoreUtilsUtils_ApplySearchResult)

@implementation RuKorincCoreUtilsUtils_Apply

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithJavaUtilIterator:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "apply", "LJavaUtilIterator;LNSObject;", "(Ljava/util/Iterator<TT;>;TT;)V", "LRuKorincCoreUtilsUtils;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _RuKorincCoreUtilsUtils_Apply = { "Apply", "ru.korinc.core.utils", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, 4, -1 };
  return &_RuKorincCoreUtilsUtils_Apply;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RuKorincCoreUtilsUtils_Apply)

@implementation RuKorincCoreUtilsUtils_Action

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRuKorincCoreUtilsUtils;" };
  static const J2ObjcClassInfo _RuKorincCoreUtilsUtils_Action = { "Action", "ru.korinc.core.utils", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_RuKorincCoreUtilsUtils_Action;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RuKorincCoreUtilsUtils_Action)
