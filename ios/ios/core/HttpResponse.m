//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../runtime/src/main/java/ru/korinc/runtime/network/HttpResponse.java
//

#include "HttpResponse.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"

@interface RuKorincRuntimeNetworkHttpResponse () {
 @public
  jint code_;
  NSString *content_;
  NSString *url_;
  IOSObjectArray *headers_;
}

@end

J2OBJC_FIELD_SETTER(RuKorincRuntimeNetworkHttpResponse, content_, NSString *)
J2OBJC_FIELD_SETTER(RuKorincRuntimeNetworkHttpResponse, url_, NSString *)
J2OBJC_FIELD_SETTER(RuKorincRuntimeNetworkHttpResponse, headers_, IOSObjectArray *)

@implementation RuKorincRuntimeNetworkHttpResponse

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RuKorincRuntimeNetworkHttpResponse_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)code
               withNSString:(NSString *)content
               withNSString:(NSString *)url
          withNSStringArray:(IOSObjectArray *)headers {
  RuKorincRuntimeNetworkHttpResponse_initWithInt_withNSString_withNSString_withNSStringArray_(self, code, content, url, headers);
  return self;
}

- (instancetype)initWithInt:(jint)code
               withNSString:(NSString *)content
               withNSString:(NSString *)url {
  RuKorincRuntimeNetworkHttpResponse_initWithInt_withNSString_withNSString_(self, code, content, url);
  return self;
}

- (jint)getCode {
  return code_;
}

- (jboolean)filter {
  return code_ != 0;
}

- (NSString *)getContent {
  return content_;
}

- (NSString *)getUrl {
  return url_;
}

- (IOSObjectArray *)getHeaders {
  return headers_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withNSString:withNSString:withNSStringArray:);
  methods[2].selector = @selector(initWithInt:withNSString:withNSString:);
  methods[3].selector = @selector(getCode);
  methods[4].selector = @selector(filter);
  methods[5].selector = @selector(getContent);
  methods[6].selector = @selector(getUrl);
  methods[7].selector = @selector(getHeaders);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "code_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "content_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "url_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "headers_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;LNSString;[LNSString;", "ILNSString;LNSString;" };
  static const J2ObjcClassInfo _RuKorincRuntimeNetworkHttpResponse = { "HttpResponse", "ru.korinc.runtime.network", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, -1, -1, -1, -1 };
  return &_RuKorincRuntimeNetworkHttpResponse;
}

@end

void RuKorincRuntimeNetworkHttpResponse_init(RuKorincRuntimeNetworkHttpResponse *self) {
  NSObject_init(self);
  self->url_ = @"";
}

RuKorincRuntimeNetworkHttpResponse *new_RuKorincRuntimeNetworkHttpResponse_init() {
  J2OBJC_NEW_IMPL(RuKorincRuntimeNetworkHttpResponse, init)
}

RuKorincRuntimeNetworkHttpResponse *create_RuKorincRuntimeNetworkHttpResponse_init() {
  J2OBJC_CREATE_IMPL(RuKorincRuntimeNetworkHttpResponse, init)
}

void RuKorincRuntimeNetworkHttpResponse_initWithInt_withNSString_withNSString_withNSStringArray_(RuKorincRuntimeNetworkHttpResponse *self, jint code, NSString *content, NSString *url, IOSObjectArray *headers) {
  NSObject_init(self);
  self->url_ = @"";
  self->code_ = code;
  self->content_ = content;
  self->url_ = url;
  self->headers_ = headers;
}

RuKorincRuntimeNetworkHttpResponse *new_RuKorincRuntimeNetworkHttpResponse_initWithInt_withNSString_withNSString_withNSStringArray_(jint code, NSString *content, NSString *url, IOSObjectArray *headers) {
  J2OBJC_NEW_IMPL(RuKorincRuntimeNetworkHttpResponse, initWithInt_withNSString_withNSString_withNSStringArray_, code, content, url, headers)
}

RuKorincRuntimeNetworkHttpResponse *create_RuKorincRuntimeNetworkHttpResponse_initWithInt_withNSString_withNSString_withNSStringArray_(jint code, NSString *content, NSString *url, IOSObjectArray *headers) {
  J2OBJC_CREATE_IMPL(RuKorincRuntimeNetworkHttpResponse, initWithInt_withNSString_withNSString_withNSStringArray_, code, content, url, headers)
}

void RuKorincRuntimeNetworkHttpResponse_initWithInt_withNSString_withNSString_(RuKorincRuntimeNetworkHttpResponse *self, jint code, NSString *content, NSString *url) {
  NSObject_init(self);
  self->url_ = @"";
  self->url_ = url;
  self->code_ = code;
  self->content_ = content;
}

RuKorincRuntimeNetworkHttpResponse *new_RuKorincRuntimeNetworkHttpResponse_initWithInt_withNSString_withNSString_(jint code, NSString *content, NSString *url) {
  J2OBJC_NEW_IMPL(RuKorincRuntimeNetworkHttpResponse, initWithInt_withNSString_withNSString_, code, content, url)
}

RuKorincRuntimeNetworkHttpResponse *create_RuKorincRuntimeNetworkHttpResponse_initWithInt_withNSString_withNSString_(jint code, NSString *content, NSString *url) {
  J2OBJC_CREATE_IMPL(RuKorincRuntimeNetworkHttpResponse, initWithInt_withNSString_withNSString_, code, content, url)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RuKorincRuntimeNetworkHttpResponse)
