//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../runtime/src/main/java/ru/korinc/runtime/rx/casthell/StringObservable.java
//

#include "J2ObjC_source.h"
#include "ObservableWrapper.h"
#include "StringObservable.h"
#include "TypedObservable.h"

@implementation RuKorincRuntimeRxCasthellStringObservable

- (instancetype)initWithRuKorincRuntimeRxObservableWrapper:(id<RuKorincRuntimeRxObservableWrapper>)source {
  RuKorincRuntimeRxCasthellStringObservable_initWithRuKorincRuntimeRxObservableWrapper_(self, source);
  return self;
}

- (RuKorincRuntimeRxCasthellTypedObservable *)fromInternalWithRuKorincRuntimeRxObservableWrapper:(id<RuKorincRuntimeRxObservableWrapper>)source {
  return new_RuKorincRuntimeRxCasthellStringObservable_initWithRuKorincRuntimeRxObservableWrapper_(source);
}

+ (RuKorincRuntimeRxCasthellStringObservable *)fromWithRuKorincRuntimeRxObservableWrapper:(id<RuKorincRuntimeRxObservableWrapper>)source {
  return RuKorincRuntimeRxCasthellStringObservable_fromWithRuKorincRuntimeRxObservableWrapper_(source);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LRuKorincRuntimeRxCasthellTypedObservable;", 0x4, 2, 0, -1, 3, -1, -1 },
    { NULL, "LRuKorincRuntimeRxCasthellStringObservable;", 0x9, 4, 0, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRuKorincRuntimeRxObservableWrapper:);
  methods[1].selector = @selector(fromInternalWithRuKorincRuntimeRxObservableWrapper:);
  methods[2].selector = @selector(fromWithRuKorincRuntimeRxObservableWrapper:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRuKorincRuntimeRxObservableWrapper;", "(Lru/korinc/runtime/rx/ObservableWrapper<Ljava/lang/String;>;)V", "fromInternal", "(Lru/korinc/runtime/rx/ObservableWrapper<Ljava/lang/String;>;)Lru/korinc/runtime/rx/casthell/TypedObservable;", "from", "(Lru/korinc/runtime/rx/ObservableWrapper<Ljava/lang/String;>;)Lru/korinc/runtime/rx/casthell/StringObservable;", "Lru/korinc/runtime/rx/casthell/TypedObservable<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RuKorincRuntimeRxCasthellStringObservable = { "StringObservable", "ru.korinc.runtime.rx.casthell", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, 6, -1 };
  return &_RuKorincRuntimeRxCasthellStringObservable;
}

@end

void RuKorincRuntimeRxCasthellStringObservable_initWithRuKorincRuntimeRxObservableWrapper_(RuKorincRuntimeRxCasthellStringObservable *self, id<RuKorincRuntimeRxObservableWrapper> source) {
  RuKorincRuntimeRxCasthellTypedObservable_initWithRuKorincRuntimeRxObservableWrapper_(self, source);
}

RuKorincRuntimeRxCasthellStringObservable *new_RuKorincRuntimeRxCasthellStringObservable_initWithRuKorincRuntimeRxObservableWrapper_(id<RuKorincRuntimeRxObservableWrapper> source) {
  J2OBJC_NEW_IMPL(RuKorincRuntimeRxCasthellStringObservable, initWithRuKorincRuntimeRxObservableWrapper_, source)
}

RuKorincRuntimeRxCasthellStringObservable *create_RuKorincRuntimeRxCasthellStringObservable_initWithRuKorincRuntimeRxObservableWrapper_(id<RuKorincRuntimeRxObservableWrapper> source) {
  J2OBJC_CREATE_IMPL(RuKorincRuntimeRxCasthellStringObservable, initWithRuKorincRuntimeRxObservableWrapper_, source)
}

RuKorincRuntimeRxCasthellStringObservable *RuKorincRuntimeRxCasthellStringObservable_fromWithRuKorincRuntimeRxObservableWrapper_(id<RuKorincRuntimeRxObservableWrapper> source) {
  RuKorincRuntimeRxCasthellStringObservable_initialize();
  return new_RuKorincRuntimeRxCasthellStringObservable_initWithRuKorincRuntimeRxObservableWrapper_(source);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RuKorincRuntimeRxCasthellStringObservable)
