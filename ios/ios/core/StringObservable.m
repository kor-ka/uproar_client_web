//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../core/src/main/java/ru/korinc/runtime/rx/StringObservable.java
//

#include "BackgroundSchedulerWrapper.h"
#include "Consumer.h"
#include "DisposableWrapper.h"
#include "Function.h"
#include "J2ObjC_source.h"
#include "ObservableWrapper.h"
#include "StringObservable.h"

@interface RuKorincRuntimeRxStringObservable () {
 @public
  id<RuKorincRuntimeRxObservableWrapper> source_;
}

@end

J2OBJC_FIELD_SETTER(RuKorincRuntimeRxStringObservable, source_, id<RuKorincRuntimeRxObservableWrapper>)

@implementation RuKorincRuntimeRxStringObservable

- (instancetype)initWithRuKorincRuntimeRxObservableWrapper:(id<RuKorincRuntimeRxObservableWrapper>)source {
  RuKorincRuntimeRxStringObservable_initWithRuKorincRuntimeRxObservableWrapper_(self, source);
  return self;
}

+ (RuKorincRuntimeRxStringObservable *)fromWithRuKorincRuntimeRxObservableWrapper:(id<RuKorincRuntimeRxObservableWrapper>)source {
  return RuKorincRuntimeRxStringObservable_fromWithRuKorincRuntimeRxObservableWrapper_(source);
}

- (RuKorincRuntimeRxStringObservable *)observeOnMain {
  return RuKorincRuntimeRxStringObservable_fromWithRuKorincRuntimeRxObservableWrapper_([((id<RuKorincRuntimeRxObservableWrapper>) nil_chk(source_)) observeOnMain]);
}

- (id<RuKorincRuntimeRxObservableWrapper>)observeOnWithScheduler:(id<RuKorincRuntimeRxBackgroundSchedulerWrapper>)scheduler {
  return RuKorincRuntimeRxStringObservable_fromWithRuKorincRuntimeRxObservableWrapper_([((id<RuKorincRuntimeRxObservableWrapper>) nil_chk(source_)) observeOnWithScheduler:scheduler]);
}

- (id<RuKorincRuntimeRxObservableWrapper>)subscribeOnWithScheduler:(id<RuKorincRuntimeRxBackgroundSchedulerWrapper>)scheduler {
  return RuKorincRuntimeRxStringObservable_fromWithRuKorincRuntimeRxObservableWrapper_([((id<RuKorincRuntimeRxObservableWrapper>) nil_chk(source_)) subscribeOnWithScheduler:scheduler]);
}

- (id<RuKorincRuntimeRxDisposableWrapper>)subscribeWithConsumer:(id<RuKorincRuntimeRxConsumer>)consumer {
  return [((id<RuKorincRuntimeRxObservableWrapper>) nil_chk(source_)) subscribeWithConsumer:consumer];
}

- (id<RuKorincRuntimeRxObservableWrapper>)mapWithFunc:(id<RuKorincRuntimeRxFunction>)func1 {
  return nil;
}

- (id<RuKorincRuntimeRxObservableWrapper>)flatMapWithFunc:(id<RuKorincRuntimeRxFunction>)mapper {
  return nil;
}

- (id<RuKorincRuntimeRxObservableWrapper>)getSource {
  return source_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LRuKorincRuntimeRxStringObservable;", 0x9, 2, 0, -1, 3, -1, -1 },
    { NULL, "LRuKorincRuntimeRxStringObservable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRuKorincRuntimeRxObservableWrapper;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LRuKorincRuntimeRxObservableWrapper;", 0x1, 7, 5, -1, 6, -1, -1 },
    { NULL, "LRuKorincRuntimeRxDisposableWrapper;", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "LRuKorincRuntimeRxObservableWrapper;", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "LRuKorincRuntimeRxObservableWrapper;", 0x1, 14, 12, -1, 15, -1, -1 },
    { NULL, "LRuKorincRuntimeRxObservableWrapper;", 0x1, -1, -1, -1, 16, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRuKorincRuntimeRxObservableWrapper:);
  methods[1].selector = @selector(fromWithRuKorincRuntimeRxObservableWrapper:);
  methods[2].selector = @selector(observeOnMain);
  methods[3].selector = @selector(observeOnWithScheduler:);
  methods[4].selector = @selector(subscribeOnWithScheduler:);
  methods[5].selector = @selector(subscribeWithConsumer:);
  methods[6].selector = @selector(mapWithFunc:);
  methods[7].selector = @selector(flatMapWithFunc:);
  methods[8].selector = @selector(getSource);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LRuKorincRuntimeRxObservableWrapper;", .constantValue.asLong = 0, 0x2, -1, -1, 17, -1 },
  };
  static const void *ptrTable[] = { "LRuKorincRuntimeRxObservableWrapper;", "(Lru/korinc/runtime/rx/ObservableWrapper<Ljava/lang/String;>;)V", "from", "(Lru/korinc/runtime/rx/ObservableWrapper<Ljava/lang/String;>;)Lru/korinc/runtime/rx/StringObservable;", "observeOn", "LRuKorincRuntimeRxBackgroundSchedulerWrapper;", "(Lru/korinc/runtime/rx/BackgroundSchedulerWrapper;)Lru/korinc/runtime/rx/ObservableWrapper<Ljava/lang/String;>;", "subscribeOn", "subscribe", "LRuKorincRuntimeRxConsumer;", "(Lru/korinc/runtime/rx/Consumer<Ljava/lang/String;>;)Lru/korinc/runtime/rx/DisposableWrapper;", "map", "LRuKorincRuntimeRxFunction;", "<R:Ljava/lang/Object;>(Lru/korinc/runtime/rx/Function<-Ljava/lang/String;+TR;>;)Lru/korinc/runtime/rx/ObservableWrapper<TR;>;", "flatMap", "<R:Ljava/lang/Object;>(Lru/korinc/runtime/rx/Function<-Ljava/lang/String;+Lru/korinc/runtime/rx/ObservableWrapper<+TR;>;>;)Lru/korinc/runtime/rx/ObservableWrapper<TR;>;", "()Lru/korinc/runtime/rx/ObservableWrapper<Ljava/lang/String;>;", "Lru/korinc/runtime/rx/ObservableWrapper<Ljava/lang/String;>;", "Ljava/lang/Object;Lru/korinc/runtime/rx/ObservableWrapper<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RuKorincRuntimeRxStringObservable = { "StringObservable", "ru.korinc.runtime.rx", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, -1, -1, 18, -1 };
  return &_RuKorincRuntimeRxStringObservable;
}

@end

void RuKorincRuntimeRxStringObservable_initWithRuKorincRuntimeRxObservableWrapper_(RuKorincRuntimeRxStringObservable *self, id<RuKorincRuntimeRxObservableWrapper> source) {
  NSObject_init(self);
  self->source_ = source;
}

RuKorincRuntimeRxStringObservable *new_RuKorincRuntimeRxStringObservable_initWithRuKorincRuntimeRxObservableWrapper_(id<RuKorincRuntimeRxObservableWrapper> source) {
  J2OBJC_NEW_IMPL(RuKorincRuntimeRxStringObservable, initWithRuKorincRuntimeRxObservableWrapper_, source)
}

RuKorincRuntimeRxStringObservable *create_RuKorincRuntimeRxStringObservable_initWithRuKorincRuntimeRxObservableWrapper_(id<RuKorincRuntimeRxObservableWrapper> source) {
  J2OBJC_CREATE_IMPL(RuKorincRuntimeRxStringObservable, initWithRuKorincRuntimeRxObservableWrapper_, source)
}

RuKorincRuntimeRxStringObservable *RuKorincRuntimeRxStringObservable_fromWithRuKorincRuntimeRxObservableWrapper_(id<RuKorincRuntimeRxObservableWrapper> source) {
  RuKorincRuntimeRxStringObservable_initialize();
  return new_RuKorincRuntimeRxStringObservable_initWithRuKorincRuntimeRxObservableWrapper_(source);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RuKorincRuntimeRxStringObservable)
