//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../core/src/main/java/ru/korinc/runtime/RuntimeConfiguration.java
//

#include "J2ObjC_source.h"
#include "LogProvider.h"
#include "RuntimeConfiguration.h"
#include "RxProvider.h"
#include "TimeoutProvider.h"

@interface RuKorincRuntimeRuntimeConfiguration () {
 @public
  id<RuKorincRuntimeRxRxProvider> mRxProvider_;
  id<RuKorincRuntimeTimeoutTimeoutProvider> mTimeoutProvider_;
  id<RuKorincRuntimeLoggingLogProvider> mLogProvider_;
}

@end

J2OBJC_FIELD_SETTER(RuKorincRuntimeRuntimeConfiguration, mRxProvider_, id<RuKorincRuntimeRxRxProvider>)
J2OBJC_FIELD_SETTER(RuKorincRuntimeRuntimeConfiguration, mTimeoutProvider_, id<RuKorincRuntimeTimeoutTimeoutProvider>)
J2OBJC_FIELD_SETTER(RuKorincRuntimeRuntimeConfiguration, mLogProvider_, id<RuKorincRuntimeLoggingLogProvider>)

@implementation RuKorincRuntimeRuntimeConfiguration

- (instancetype)initWithRuKorincRuntimeRxRxProvider:(id<RuKorincRuntimeRxRxProvider>)rxProvider
          withRuKorincRuntimeTimeoutTimeoutProvider:(id<RuKorincRuntimeTimeoutTimeoutProvider>)timeoutProvider
              withRuKorincRuntimeLoggingLogProvider:(id<RuKorincRuntimeLoggingLogProvider>)logProvider {
  RuKorincRuntimeRuntimeConfiguration_initWithRuKorincRuntimeRxRxProvider_withRuKorincRuntimeTimeoutTimeoutProvider_withRuKorincRuntimeLoggingLogProvider_(self, rxProvider, timeoutProvider, logProvider);
  return self;
}

- (id<RuKorincRuntimeRxRxProvider>)getRxProvider {
  return mRxProvider_;
}

- (id<RuKorincRuntimeTimeoutTimeoutProvider>)getTimeoutProvider {
  return mTimeoutProvider_;
}

- (id<RuKorincRuntimeLoggingLogProvider>)getLogProvider {
  return mLogProvider_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LRuKorincRuntimeRxRxProvider;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRuKorincRuntimeTimeoutTimeoutProvider;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRuKorincRuntimeLoggingLogProvider;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRuKorincRuntimeRxRxProvider:withRuKorincRuntimeTimeoutTimeoutProvider:withRuKorincRuntimeLoggingLogProvider:);
  methods[1].selector = @selector(getRxProvider);
  methods[2].selector = @selector(getTimeoutProvider);
  methods[3].selector = @selector(getLogProvider);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mRxProvider_", "LRuKorincRuntimeRxRxProvider;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTimeoutProvider_", "LRuKorincRuntimeTimeoutTimeoutProvider;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLogProvider_", "LRuKorincRuntimeLoggingLogProvider;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRuKorincRuntimeRxRxProvider;LRuKorincRuntimeTimeoutTimeoutProvider;LRuKorincRuntimeLoggingLogProvider;" };
  static const J2ObjcClassInfo _RuKorincRuntimeRuntimeConfiguration = { "RuntimeConfiguration", "ru.korinc.runtime", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_RuKorincRuntimeRuntimeConfiguration;
}

@end

void RuKorincRuntimeRuntimeConfiguration_initWithRuKorincRuntimeRxRxProvider_withRuKorincRuntimeTimeoutTimeoutProvider_withRuKorincRuntimeLoggingLogProvider_(RuKorincRuntimeRuntimeConfiguration *self, id<RuKorincRuntimeRxRxProvider> rxProvider, id<RuKorincRuntimeTimeoutTimeoutProvider> timeoutProvider, id<RuKorincRuntimeLoggingLogProvider> logProvider) {
  NSObject_init(self);
  self->mRxProvider_ = rxProvider;
  self->mTimeoutProvider_ = timeoutProvider;
  self->mLogProvider_ = logProvider;
}

RuKorincRuntimeRuntimeConfiguration *new_RuKorincRuntimeRuntimeConfiguration_initWithRuKorincRuntimeRxRxProvider_withRuKorincRuntimeTimeoutTimeoutProvider_withRuKorincRuntimeLoggingLogProvider_(id<RuKorincRuntimeRxRxProvider> rxProvider, id<RuKorincRuntimeTimeoutTimeoutProvider> timeoutProvider, id<RuKorincRuntimeLoggingLogProvider> logProvider) {
  J2OBJC_NEW_IMPL(RuKorincRuntimeRuntimeConfiguration, initWithRuKorincRuntimeRxRxProvider_withRuKorincRuntimeTimeoutTimeoutProvider_withRuKorincRuntimeLoggingLogProvider_, rxProvider, timeoutProvider, logProvider)
}

RuKorincRuntimeRuntimeConfiguration *create_RuKorincRuntimeRuntimeConfiguration_initWithRuKorincRuntimeRxRxProvider_withRuKorincRuntimeTimeoutTimeoutProvider_withRuKorincRuntimeLoggingLogProvider_(id<RuKorincRuntimeRxRxProvider> rxProvider, id<RuKorincRuntimeTimeoutTimeoutProvider> timeoutProvider, id<RuKorincRuntimeLoggingLogProvider> logProvider) {
  J2OBJC_CREATE_IMPL(RuKorincRuntimeRuntimeConfiguration, initWithRuKorincRuntimeRxRxProvider_withRuKorincRuntimeTimeoutTimeoutProvider_withRuKorincRuntimeLoggingLogProvider_, rxProvider, timeoutProvider, logProvider)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RuKorincRuntimeRuntimeConfiguration)
